# Uncomment this line to define a global platform for your project
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

# post_install do |installer|
#   installer.pods_project.targets.each do |target|
#     flutter_additional_ios_build_settings(target)
#   end
# end

post_install do |installer|
  # Ensure project-wide language settings are modern enough for gRPC/Abseil
  installer.pods_project.build_configurations.each do |config|
    config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++17'
    config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
    config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu11'
  end

  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)

    # Align all Pods' build settings
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++17'
      config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
      cppflags = config.build_settings['OTHER_CPLUSPLUSFLAGS'] || '$(inherited)'
      unless cppflags.to_s.include?('-std=gnu++17') || cppflags.to_s.include?('-std=c++17')
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = "#{cppflags} -std=gnu++17"
      end
    end

    # Strip invalid '-GCC_WARN_INHIBIT_ALL_WARNINGS' token that can be parsed as '-G'
    sources_phase = nil
    if target.respond_to?(:source_build_phase)
      sources_phase = target.source_build_phase
    else
      sources_phase = target.build_phases.find { |bp| bp.respond_to?(:files) && (bp.respond_to?(:display_name) ? bp.display_name == 'Sources' : true) }
    end
    if sources_phase && sources_phase.respond_to?(:files)
      sources_phase.files.each do |build_file|
        next unless build_file.respond_to?(:settings) && build_file.settings && build_file.settings['COMPILER_FLAGS']
        flags = build_file.settings['COMPILER_FLAGS']
        if flags.include?('-GCC_WARN_INHIBIT_ALL_WARNINGS')
          build_file.settings['COMPILER_FLAGS'] = flags.gsub('-GCC_WARN_INHIBIT_ALL_WARNINGS', '-Wno-everything')
        end
      end
    end
  end
end
